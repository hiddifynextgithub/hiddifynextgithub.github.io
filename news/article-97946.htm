<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddifynextgithub.github.io/news/article-97946.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="format-detection" content="telephone=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>Java 语言实现简易版扫码登录_在线工具</title>
        <meta name="description" content="基本介绍 相信大家对二维码都不陌生，生活中到处充斥着扫码登录的场景，如登录网页版微信、支付宝等。最近学习了一下扫码登录的原理，感觉蛮有趣的，于是自己实现了一个简易版扫码登录的 Demo，以此记录一下学" />
        <link rel="icon" href="/assets/website/img/hiddifynextgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="HiddifyNextGithub免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hiddifynextgithub.github.io/news/article-97946.htm" />
    <meta property="og:site_name" content="HiddifyNextGithub免费节点官网" />
    <meta property="og:title" content="Java 语言实现简易版扫码登录_在线工具" />
    <meta property="og:image" content="https://hiddifynextgithub.github.io/uploads/20240808-2/a078b706463e61308eb65e9facf0ff7b.webp" />
        <meta property="og:release_date" content="2025-04-17T09:01:09" />
    <meta property="og:updated_time" content="2025-04-17T09:01:09" />
        <meta property="og:description" content="基本介绍 相信大家对二维码都不陌生，生活中到处充斥着扫码登录的场景，如登录网页版微信、支付宝等。最近学习了一下扫码登录的原理，感觉蛮有趣的，于是自己实现了一个简易版扫码登录的 Demo，以此记录一下学" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java 语言实现简易版扫码登录_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">
    <link rel="dns-prefetch" href="https://fonts.gstatic.com">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/Swiper/10.3.1/swiper-bundle.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.2/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/hiddifynextgithub/vendor.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/hiddifynextgithub/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LL7EDWRR8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-LL7EDWRR8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
        <symbol xmlns="http://www.w3.org/2000/svg" id="navbar-icon" viewBox="0 0 16 16">
            <path d="M14 10.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 .5-.5zm0-3a.5.5 0 0 0-.5-.5h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 .5-.5zm0-3a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0 0 1h11a.5.5 0 0 0 .5-.5z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="facebook" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12c0 4.84 3.44 8.87 8 9.8V15H8v-3h2V9.5C10 7.57 11.57 6 13.5 6H16v3h-2c-.55 0-1 .45-1 1v2h3v3h-3v6.95c5.05-.5 9-4.76 9-9.95z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="youtube" viewBox="0 0 32 32">
            <path fill="currentColor" d="M29.41 9.26a3.5 3.5 0 0 0-2.47-2.47C24.76 6.2 16 6.2 16 6.2s-8.76 0-10.94.59a3.5 3.5 0 0 0-2.47 2.47A36.13 36.13 0 0 0 2 16a36.13 36.13 0 0 0 .59 6.74a3.5 3.5 0 0 0 2.47 2.47c2.18.59 10.94.59 10.94.59s8.76 0 10.94-.59a3.5 3.5 0 0 0 2.47-2.47A36.13 36.13 0 0 0 30 16a36.13 36.13 0 0 0-.59-6.74ZM13.2 20.2v-8.4l7.27 4.2Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="instagram" viewBox="0 0 256 256">
            <path fill="currentColor" d="M128 80a48 48 0 1 0 48 48a48.05 48.05 0 0 0-48-48Zm0 80a32 32 0 1 1 32-32a32 32 0 0 1-32 32Zm48-136H80a56.06 56.06 0 0 0-56 56v96a56.06 56.06 0 0 0 56 56h96a56.06 56.06 0 0 0 56-56V80a56.06 56.06 0 0 0-56-56Zm40 152a40 40 0 0 1-40 40H80a40 40 0 0 1-40-40V80a40 40 0 0 1 40-40h96a40 40 0 0 1 40 40ZM192 76a12 12 0 1 1-12-12a12 12 0 0 1 12 12Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="twitter" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="linkedin" viewBox="0 0 512 512">
            <path fill="currentColor" d="M444.17 32H70.28C49.85 32 32 46.7 32 66.89v374.72C32 461.91 49.85 480 70.28 480h373.78c20.54 0 35.94-18.21 35.94-38.39V66.89C480.12 46.7 464.6 32 444.17 32Zm-273.3 373.43h-64.18V205.88h64.18ZM141 175.54h-.46c-20.54 0-33.84-15.29-33.84-34.43c0-19.49 13.65-34.42 34.65-34.42s33.85 14.82 34.31 34.42c-.01 19.14-13.31 34.43-34.66 34.43Zm264.43 229.89h-64.18V296.32c0-26.14-9.34-44-32.56-44c-17.74 0-28.24 12-32.91 23.69c-1.75 4.2-2.22 9.92-2.22 15.76v113.66h-64.18V205.88h64.18v27.77c9.34-13.3 23.93-32.44 57.88-32.44c42.13 0 74 27.77 74 87.64Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="arrow-down" viewBox="0 0 32 32">
            <path fill="currentColor" d="M24.59 16.59L17 24.17V4h-2v20.17l-7.59-7.58L6 18l10 10l10-10l-1.41-1.41z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="cart" viewBox="0 0 512 512">
            <path fill="currentColor" d="M160 96.039v32h304v63.345l-35.5 112.655H149.932L109.932 16H16v32h66.068l40 288.039h329.9L496 196.306V96.039H160zm16.984 272.305a64.073 64.073 0 0 0-64 64a64 64 0 0 0 128 0a64.072 64.072 0 0 0-64-64Zm0 96a32 32 0 1 1 32-32a32.038 32.038 0 0 1-32 32Zm224-96a64.073 64.073 0 0 0-64 64a64 64 0 0 0 128 0a64.072 64.072 0 0 0-64-64Zm0 96a32 32 0 1 1 32-32a32.038 32.038 0 0 1-32 32Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="balloon" viewBox="0 0 24 24">
            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="1.5">
                <path d="M8 16.607c1.15.86 2.518 1.38 4 1.393c4.142.034 7.594-3.92 7.56-8.196C19.527 5.53 16.142 2.034 12 2c-4.142-.034-7.473 3.404-7.44 7.68A8.88 8.88 0 0 0 5.244 13" />
                <path d="M15.5 9a3.035 3.035 0 0 0-3-3M12 20.35c.321 0 .482 0 .593-.022c.654-.128 1.051-.772.858-1.39c-.033-.105-.109-.242-.261-.515M12 20.35c-.321 0-.482 0-.593-.022c-.654-.128-1.051-.772-.858-1.39c.033-.105.109-.242.261-.515M12 20.35v2.15" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="bag-heart" viewBox="0 0 24 24">
            <g fill="none">
                <path fill="currentColor" d="m12 12.191l-.519.542a.75.75 0 0 0 1.038 0L12 12.191Zm-.957 3.675l-.444.604l.444-.604Zm1.914 0l-.444-.605l.444.605Zm-.957.462v.75v-.75Zm-.514-1.067c-.417-.307-.878-.69-1.227-1.093c-.368-.426-.509-.757-.509-.971h-1.5c0 .77.441 1.45.875 1.952c.453.525 1.014.984 1.474 1.321l.887-1.21ZM9.75 13.197c0-.576.263-.827.492-.907c.25-.088.714-.06 1.24.443l1.037-1.083c-.825-.79-1.861-1.096-2.773-.776c-.934.327-1.496 1.226-1.496 2.323h1.5Zm3.65 3.273c.46-.337 1.022-.796 1.475-1.32c.434-.502.875-1.183.875-1.953h-1.5c0 .214-.141.545-.51.971c-.348.403-.809.786-1.226 1.093l.887 1.21Zm2.35-3.273c0-1.097-.563-1.996-1.496-2.323c-.912-.32-1.948-.014-2.773.776l1.038 1.083c.525-.503.989-.531 1.24-.443c.228.08.491.33.491.907h1.5ZM10.6 16.47c.368.27.782.608 1.4.608v-1.5c-.024 0-.04 0-.094-.03a4 4 0 0 1-.42-.287l-.887 1.21Zm1.914-1.21a4 4 0 0 1-.42.289c-.054.029-.07.029-.094.029v1.5c.618 0 1.032-.337 1.4-.608l-.886-1.21Z" />
                <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="M9 6V5a3 3 0 1 1 6 0v1m5.224 6.526c-.586-3.121-.878-4.682-1.99-5.604C17.125 6 15.537 6 12.36 6h-.72c-3.176 0-4.764 0-5.875.922c-1.11.922-1.403 2.483-1.989 5.604c-.823 4.389-1.234 6.583-.034 8.029C4.942 22 7.174 22 11.639 22h.722c4.465 0 6.698 0 7.897-1.445c.696-.84.85-1.93.696-3.555" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="handiplast" viewBox="0 0 24 24">
            <g fill="none">
                <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="M13.5 7.642L9.071 3.213a4.142 4.142 0 0 0-5.858 5.858L14.93 20.787a4.142 4.142 0 0 0 5.858-5.858l-4.358-4.358" />
                <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="m12 17.858l-2.929 2.929A4.142 4.142 0 0 1 2.596 20m3.546-8l-2.929 2.929c-.322.322-.58.685-.774 1.071M12 6.142l2.929-2.929a4.142 4.142 0 1 1 5.858 5.858L17.857 12" />
                <path fill="currentColor" d="M15.841 12.871a.788.788 0 1 1-1.114 1.114a.788.788 0 0 1 1.114-1.114Zm-3.712-3.712a.787.787 0 1 0-1.114 1.114a.787.787 0 0 0 1.114-1.114Zm4.641 6.497a.787.787 0 1 1-1.114 1.114a.787.787 0 0 1 1.114-1.114ZM9.345 8.23A.788.788 0 1 0 8.23 9.346A.788.788 0 0 0 9.345 8.23Zm3.712 3.713a.787.787 0 1 1-1.113 1.114a.787.787 0 0 1 1.113-1.114Zm.928 2.785a.788.788 0 1 1-1.114 1.113a.788.788 0 0 1 1.114-1.113Zm-3.712-3.713a.787.787 0 1 0-1.114 1.114a.787.787 0 0 0 1.114-1.114Z" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="star-fill" viewBox="0 0 16 16">
            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="star-empty" viewBox="0 0 16 16">
            <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="play" viewBox="0 0 32 32">
            <path fill="currentColor" d="M7 28a1 1 0 0 1-1-1V5a1 1 0 0 1 1.482-.876l20 11a1 1 0 0 1 0 1.752l-20 11A1 1 0 0 1 7 28ZM8 6.69v18.62L24.925 16Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="call-chat" viewBox="0 0 24 24">
            <path fill="currentColor" fill-rule="evenodd" d="M17 2.75a4.25 4.25 0 0 0-3.807 6.142c.16.32.225.71.12 1.102l-.253.946l.946-.253a1.567 1.567 0 0 1 1.102.12A4.25 4.25 0 1 0 17 2.75ZM11.25 7a5.75 5.75 0 1 1 3.19 5.15a.126.126 0 0 0-.04-.013h-.007l-1.112.297a1.4 1.4 0 0 1-1.715-1.714l.298-1.113V9.6a.126.126 0 0 0-.014-.04a5.73 5.73 0 0 1-.6-2.56ZM3.718 4.092c1.226-1.29 3.254-1.049 4.268.385l1.26 1.783c.811 1.147.743 2.74-.225 3.76l-.245.257c0 .002 0 .004-.002.006c-.013.037-.045.152-.013.372c.067.456.418 1.381 1.846 2.884c1.432 1.508 2.3 1.864 2.703 1.929a.608.608 0 0 0 .294-.007l.408-.43c.874-.92 2.236-1.101 3.335-.469l1.91 1.1c1.633.94 2.013 3.239.708 4.613l-1.42 1.495c-.443.467-1.048.866-1.795.94c-1.824.18-6.049-.055-10.478-4.718c-4.134-4.352-4.919-8.137-5.018-9.986c-.049-.914.358-1.697.894-2.261l.544.516l-.544-.516l1.57-1.653Zm3.043 1.25c-.512-.724-1.433-.767-1.956-.217l-1.57 1.653c-.33.349-.505.748-.483 1.148c.08 1.51.731 4.952 4.607 9.033c4.064 4.279 7.809 4.4 9.244 4.258c.283-.028.575-.186.854-.48l1.42-1.495c.614-.645.453-1.808-.368-2.28l-1.91-1.1c-.513-.295-1.114-.204-1.499.202l-.455.48l-.544-.517c.543.517.543.517.542.518l-.001.002l-.003.003l-.007.006l-.014.014a1.003 1.003 0 0 1-.136.112c-.08.057-.186.12-.321.172c-.276.11-.64.168-1.091.095c-.878-.143-2.028-.773-3.55-2.377c-1.528-1.608-2.113-2.807-2.243-3.7c-.067-.454-.014-.817.084-1.092a1.592 1.592 0 0 1 .23-.427l.03-.037l.014-.015l.006-.006l.003-.003l.002-.002s.001-.001.545.515l-.544-.516l.287-.302c.445-.47.51-1.264.088-1.86L6.76 5.342Z" clip-rule="evenodd" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="mail" viewBox="0 0 21 21">
            <g fill="none" fill-rule="evenodd" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3.5 6.5v8a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2h-10a2 2 0 0 0-2 2z" />
                <path d="m5.5 7.5l5 3l5-3" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="location" viewBox="0 0 24 24">
            <path fill="currentColor" fill-rule="evenodd" d="M5.25 7.7c0-3.598 3.059-6.45 6.75-6.45c3.608 0 6.612 2.725 6.745 6.208l.478.16c.463.153.87.289 1.191.439c.348.162.667.37.911.709c.244.338.341.707.385 1.088c.04.353.04.78.04 1.269v5.748c0 .61 0 1.13-.047 1.547c-.05.438-.161.87-.463 1.237a2.25 2.25 0 0 1-.62.525c-.412.237-.855.276-1.296.253c-.42-.022-.933-.107-1.534-.208l-.041-.007c-1.293-.215-1.814-.296-2.322-.254a4.3 4.3 0 0 0-.552.083c-.498.109-.976.342-2.159.933l-.122.061c-1.383.692-2.234 1.118-3.154 1.251c-.276.04-.555.06-.835.06c-.928-.002-1.825-.301-3.28-.786a73.75 73.75 0 0 1-.127-.043l-.384-.128l-.037-.012c-.463-.154-.87-.29-1.191-.44c-.348-.162-.667-.37-.911-.709c-.244-.338-.341-.707-.385-1.088c-.04-.353-.04-.78-.04-1.269v-5.02c0-.786 0-1.448.067-1.967c.07-.542.23-1.072.666-1.47a2.25 2.25 0 0 1 .42-.304c.517-.287 1.07-.27 1.605-.166c.11.021.223.047.342.078c-.066-.446-.1-.89-.1-1.328Zm.499 3.01a9.414 9.414 0 0 0-1.028-.288c-.395-.077-.525-.03-.586.004a.747.747 0 0 0-.14.101c-.053.048-.138.156-.19.556c-.053.41-.055.974-.055 1.825v4.93c0 .539.001.88.03 1.138c.028.238.072.327.112.381c.039.055.109.125.326.226c.236.11.56.219 1.07.39l.384.127c1.624.541 2.279.75 2.936.752c.207 0 .413-.015.617-.044c.65-.094 1.276-.397 2.82-1.17l.093-.046c1.06-.53 1.714-.857 2.417-1.01c.246-.054.496-.092.747-.113c.717-.06 1.432.06 2.593.253l.1.017c.655.109 1.083.18 1.407.196c.312.016.419-.025.471-.055a.749.749 0 0 0 .207-.175c.039-.047.097-.146.132-.456c.037-.323.038-.757.038-1.42v-5.667c0-.539-.001-.88-.03-1.138c-.028-.238-.072-.327-.112-.381c-.039-.055-.109-.125-.326-.226c-.236-.11-.56-.219-1.07-.39l-.06-.019a10.701 10.701 0 0 1-1.335 3.788c-.912 1.568-2.247 2.934-3.92 3.663a3.505 3.505 0 0 1-2.794 0c-1.673-.73-3.008-2.095-3.92-3.663a10.856 10.856 0 0 1-.934-2.087ZM12 2.75c-2.936 0-5.25 2.252-5.25 4.95c0 1.418.437 2.98 1.23 4.341c.791 1.362 1.908 2.47 3.223 3.044c.505.22 1.089.22 1.594 0c1.316-.574 2.432-1.682 3.224-3.044c.792-1.36 1.229-2.923 1.229-4.34c0-2.699-2.314-4.951-5.25-4.951Zm0 4a1.25 1.25 0 1 0 0 2.5a1.25 1.25 0 0 0 0-2.5ZM9.25 8a2.75 2.75 0 1 1 5.5 0a2.75 2.75 0 0 1-5.5 0Z" clip-rule="evenodd" />
        </symbol>
    </svg>
    <header id="header" class="site-header position-fixed z-2 w-100 border-bottom mb-5">
        <nav id="header-nav" class="navbar navbar-expand-lg py-3">
            <div class="container-lg">
                <a class="navbar-brand pb-4" href="/">
                                <span>Hiddify Next Github</span>
                                </a>
                <button class="navbar-toggler d-flex d-lg-none order-3 p-2 border-0 shadow-none bg-white" type="button" data-bs-toggle="offcanvas" data-bs-target="#bdNavbar" aria-controls="bdNavbar" aria-expanded="false" aria-label="Toggle navigation">
                    <svg class="navbar-icon" width="50" height="50">
                        <use xlink:href="#navbar-icon"></use>
                    </svg>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="bdNavbar" aria-labelledby="bdNavbarOffcanvasLabel">
                    <div class="offcanvas-header px-4 pb-0">
                        <button type="button" class="btn-close btn-close-black" data-bs-dismiss="offcanvas" aria-label="Close" data-bs-target="#bdNavbar"></button>
                    </div>
                    <div class="offcanvas-body">
                        <ul class="navbar-nav scrollspy-nav justify-content-end flex-grow-1 gap-lg-5 pe-3">
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/news/">新闻资讯</a>
                            </li>
                                                        
                            <span class="scrollspy-indicator"></span>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <section id="intro" class="scrollspy-section bg-light" style="background: url(/assets/website/img/hiddifynextgithub/bg-pattern.png) no-repeat;background-size: cover;">
        <div class="container-lg py-5">
            <div class="row justify-content-center py-5">
                <div class="col-lg-10 text-center">
                    <h1 class="display-2 fw-bold mt-5 pt-5">Java 语言实现简易版扫码登录_在线工具</h1>
                    <nav class="breadcrumb justify-content-center">
                        <a class="breadcrumb-item" href="/">首页</a>
                        <a class="breadcrumb-item" href="/news/">新闻资讯</a>
                        <span class="breadcrumb-item active" aria-current="page">正文</span>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <section id="why" class="scrollspy-section py-5 my-5">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="基本介绍">基本介绍</h2> <p>相信大家对二维码都不陌生，生活中到处充斥着扫码登录的场景，如登录网页版微信、支付宝等。最近学习了一下扫码登录的原理，感觉蛮有趣的，于是自己实现了一个简易版扫码登录的 Demo，以此记录一下学习过程。</p> <blockquote> <p>实际上是面试的时候被问到了 ￣△￣！</p> </blockquote> <h2 id="原理解析">原理解析</h2> <p><strong>1. 身份认证机制</strong></p> <p>在介绍扫码登录的原理之前，我们先聊一聊服务端的身份认证机制。以普通的<code>账号 + 密码</code> 登录方式为例，服务端收到用户的登录请求后，首先验证账号、密码的合法性。如果验证通过，那么服务端会为用户分配一个 token，该 token 与用户的身份信息相关联，可作为用户的登录凭证。之后 PC 端再次发送请求时，需要在请求的 Header 或者 Query 参数中携带 token，服务端根据 token 便可识别出当前用户。token 的优点是更加方便、安全，它降低了账号密码被劫持的风险，而且用户不需要重复地输入账号和密码。PC 端通过账号和密码登录的过程如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/634bb884a69fd4be5e19cc1afe0cb998.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>扫码登录本质上也是一种身份认证方式，<code>账号 + 密码</code> 登录与扫码登录的区别在于，前者是利用 PC 端的账号和密码为 PC 端申请一个 token，后者是利用<code>手机端的 token + 设备信息</code> 为 PC 端申请一个 token。这两种登录方式的目的相同，都是为了使 PC 端获得服务端的 "授权"，在为 PC 端申请 token 之前，二者都需要向服务端证明自己的身份，也就是必须让服务端知道当前用户是谁，这样服务端才能为其生成 PC 端 token。由于扫码前手机端一定是处于已登录状态的，因此手机端本身已经保存了一个 token，该 token 可用于服务端的身份识别。那么为什么手机端在验证身份时还需要设备信息呢？实际上，手机端的身份认证和 PC 端略有不同：</p> <ol> <li> <p>手机端在登录前也需要输入账号和密码，但登录请求中除了账号密码外还包含着设备信息，例如设备类型、设备 id 等。</p> </li> <li> <p>接收到登录请求后，服务端会验证账号和密码，验证通过后，将用户信息与设备信息关联起来，也就是将它们存储在一个数据结构 structure 中。</p> </li> <li> <p>服务端为手机端生成一个 token，并将 token 与用户信息、设备信息关联起来，即以 token 为 key，structure 为 value，将该键值对持久化保存到本地，之后将 token 返回给手机端。</p> </li> <li> <p>手机端发送请求，携带 token 和设备信息，服务端根据 token 查询出 structure，并验证 structure 中的设备信息和手机端的设备信息是否相同，以此判断用户的有效性。</p> </li> </ol> <p>我们在 PC 端登录成功后，可以短时间内正常浏览网页，但之后访问网站时就要重新登陆了，这是因为 token 是有过期时间的，较长的有效时间会增大 token 被劫持的风险。但是，手机端好像很少有这种问题，例如微信登录成功后可以一直使用，即使关闭微信或重启手机。这是因为设备信息具有唯一性，即使 token 被劫持了，由于设备信息不同，攻击者也无法向服务端证明自己的身份，这样大大提高了安全系数，因此 token 可以长久使用。手机端通过账号密码登录的过程如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/992d264977fce4a14c94e7cce85ebd3a.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p><strong>2. 流程概述</strong></p> <p>了解了服务端的身份认证机制后，我们再聊一聊扫码登录的整个流程。以网页版微信为例，我们在 PC 端点击二维码登录后，浏览器页面会弹出二维码图片，此时打开手机微信扫描二维码，PC 端随即显示 "正在扫码"，手机端点击确认登录后，PC 端就会显示 "登陆成功" 了。</p> <p>上述过程中，服务端可以根据手机端的操作来响应 PC 端，那么服务端是如何将二者关联起来的呢？答案就是通过 "二维码"，严格来说是通过二维码中的内容。使用二维码解码器扫描网页版微信的二维码，可以得到如下内容：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/8fab41d5ea9c36c3738b54dd4ea8830b.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>由上图我们得知，二维码中包含的其实是一个网址，手机扫描二维码后，会根据该网址向服务端发送请求。接着，我们打开 PC 端浏览器的开发者工具：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/522f4267278c0ec4542b02e6cd8bd8e6.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>可见，在显示出二维码之后，PC 端一直都没有 "闲着"，它通过轮询的方式不断向服务端发送请求，以获知手机端操作的结果。这里我们注意到，PC 端发送的 URL 中有一个参数 uuid，值为 "Adv-NP1FYw=="，该 uuid 也存在于二维码包含的网址中。由此我们可以推断，服务端在生成二维码之前会先生成一个二维码 id，二维码 id 与二维码的状态、过期时间等信息绑定在一起，一同存储在服务端。手机端可以根据二维码 id 操作服务端二维码的状态，PC 端可以根据二维码 id 向服务端询问二维码的状态。</p> <p>二维码最初为 "待扫描" 状态，手机端扫码后服务端将其状态改为 "待确认" 状态，此时 PC 端的轮询请求到达，服务端向其返回 "待确认" 的响应。手机端确认登录后，二维码变成 "已确认" 状态，服务端为 PC 端生成用于身份认证的 token，PC 端再次询问时，就可以得到这个 token。整个扫码登录的流程如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a8ae730590a9781c4e2818d2b9e97123.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <ol> <li> <p>PC 端发送 "扫码登录" 请求，服务端生成二维码 id，并存储二维码的过期时间、状态等信息。</p> </li> <li> <p>PC 端获取二维码并显示。</p> </li> <li> <p>PC 端开始轮询检查二维码的状态，二维码最初为 "待扫描" 状态。</p> </li> <li> <p>手机端扫描二维码，获取二维码 id。</p> </li> <li> <p>手机端向服务端发送 "扫码" 请求，请求中携带二维码 id、手机端 token 以及设备信息。</p> </li> <li> <p>服务端验证手机端用户的合法性，验证通过后将二维码状态置为 "待确认"，并将用户信息与二维码关联在一起，之后为手机端生成一个一次性 token，该 token 用作确认登录的凭证。</p> </li> <li> <p>PC 端轮询时检测到二维码状态为 "待确认"。</p> </li> <li> <p>手机端向服务端发送 "确认登录" 请求，请求中携带着二维码 id、一次性 token 以及设备信息。</p> </li> <li> <p>服务端验证一次性 token，验证通过后将二维码状态置为 "已确认"，并为 PC 端生成 PC 端 token。</p> </li> <li> <p>PC 端轮询时检测到二维码状态为 "已确认"，并获取到了 PC 端 token，之后 PC 端不再轮询。</p> </li> <li> <p>PC 端通过 PC 端 token 访问服务端。</p> </li> </ol> <p>上述过程中，我们注意到，手机端扫码后服务端会返回一个一次性 token，该 token 也是一种身份凭证，但它只能使用一次。一次性 token 的作用是确保 "扫码请求" 与 "确认登录" 请求由同一个手机端发出，也就是说，手机端用户不能 "帮其他用户确认登录"。</p> <blockquote> <p>关于一次性 token 的知识本人也不是很了解，但可以推测，在服务端的缓存中，一次性 token 映射的 value 应该包含 "扫码" 请求传入的二维码信息、设备信息以及用户信息。</p> </blockquote> <h2 id="代码实现">代码实现</h2> <p><strong>1. 环境准备</strong></p> <ul> <li> <p>JDK 1.8：项目使用 Java 语言编写。</p> </li> <li> <p>Maven：依赖管理。</p> </li> <li> <p>Redis：Redis 既作为数据库存储用户的身份信息（为了简化操作未使用 MySQL），也作为缓存存储二维码信息、token 信息等。</p> </li> </ul> <p><strong>2. 主要依赖</strong></p> <ul> <li> <p>SpringBoot：项目基本环境。</p> </li> <li> <p>Hutool：开源工具类，其中的 QrCodeUtil 可用于生成二维码图片。</p> </li> <li> <p>Thymeleaf：模板引擎，用于页面渲染。</p> </li> </ul> <p><strong>3. 生成二维码</strong></p> <p>二维码的生成以及二维码状态的保存逻辑如下：</p> <pre><code class="language-java">@RequestMapping(path = "/getQrCodeImg", method = RequestMethod.GET) public String createQrCodeImg(Model model) {     String uuid = loginService.createQrImg();    String qrCode = Base64.encodeBase64String(QrCodeUtil.generatePng("http://127.0.0.1:8080/login/uuid=" + uuid, 300, 300));     model.addAttribute("uuid", uuid);    model.addAttribute("QrCode", qrCode);     return "login"; }</code></pre> <p>PC 端访问 "登录" 请求时，服务端调用 createQrImg 方法，生成一个 uuid 和一个 LoginTicket 对象，LoginTicket 对象中封装了用户的 userId 和二维码的状态。然后服务端将 uuid 作为 key，LoginTicket 对象作为 value 存入到 Redis 服务器中，并设置有效时间为 5 分钟（二维码的有效时间），createQrImg 方法的逻辑如下：</p> <pre><code class="language-java">public String createQrImg() {    // uuid    String uuid = CommonUtil.generateUUID();    LoginTicket loginTicket = new LoginTicket();    // 二维码最初为 WAITING 状态    loginTicket.setStatus(QrCodeStatusEnum.WAITING.getStatus());     // 存入 redis    String ticketKey = CommonUtil.buildTicketKey(uuid);    cacheStore.put(ticketKey, loginTicket, LoginConstant.WAIT_EXPIRED_SECONDS, TimeUnit.SECONDS);     return uuid; }</code></pre> <p>我们在前一节中提到，手机端的操作主要影响二维码的状态，PC 端轮询时也是查看二维码的状态，那么为什么还要在 LoginTicket 对象中封装 userId 呢？这样做是为了将二维码与用户进行关联，想象一下我们登录网页版微信的场景，手机端扫码后，PC 端就会显示用户的头像，虽然手机端并未确认登录，但 PC 端轮询时已经获取到了当前扫码的用户（仅头像信息）。因此手机端扫码后，需要将二维码与用户绑定在一起，使用 LoginTicket 对象只是一种实现方式。二维码生成后，我们将其状态置为 "待扫描" 状态，userId 不做处理，默认为 null。</p> <p><strong>4. 扫描二维码</strong></p> <p>手机端发送 "扫码" 请求时，Query 参数中携带着 uuid，服务端接收到请求后，调用 scanQrCodeImg 方法，根据 uuid 查询出二维码并将其状态置为 "待确认" 状态，操作完成后服务端向手机端返回 "扫码成功" 或 "二维码已失效" 的信息：</p> <pre><code class="language-java">@RequestMapping(path = "/scan", method = RequestMethod.POST) @ResponseBody public Response scanQrCodeImg(@RequestParam String uuid) {    JSONObject data = loginService.scanQrCodeImg(uuid);    if (data.getBoolean("valid")) {       return Response.createResponse("扫码成功", data);    }    return Response.createErrorResponse("二维码已失效"); }</code></pre> <p>scanQrCodeImg 方法的主要逻辑如下：</p> <pre><code class="language-java">public JSONObject scanQrCodeImg(String uuid) {    // 避免多个移动端同时扫描同一个二维码    lock.lock();    JSONObject data = new JSONObject();    try {       String ticketKey = CommonUtil.buildTicketKey(uuid);       LoginTicket loginTicket = (LoginTicket) cacheStore.get(ticketKey);        // redis 中 key 过期后也可能不会立即删除       Long expired = cacheStore.getExpireForSeconds(ticketKey);       boolean valid = loginTicket != null &amp;&amp;                QrCodeStatusEnum.parse(loginTicket.getStatus()) == QrCodeStatusEnum.WAITING &amp;&amp;                expired != null &amp;&amp;                expired &gt;= 0;       if (valid) {             User user = hostHolder.getUser();             if (user == null) {                throw new RuntimeException("用户未登录");             }             // 修改扫码状态             loginTicket.setStatus(QrCodeStatusEnum.SCANNED.getStatus());             Condition condition = CONDITION_CONTAINER.get(uuid);             if (condition != null) {                condition.signal();                CONDITION_CONTAINER.remove(uuid);             }             // 将二维码与用户进行关联             loginTicket.setUserId(user.getUserId());             cacheStore.put(ticketKey, loginTicket, expired, TimeUnit.SECONDS);              // 生成一次性 token, 用于之后的确认请求             String onceToken = CommonUtil.generateUUID();              cacheStore.put(CommonUtil.buildOnceTokenKey(onceToken), uuid, LoginConstant.ONCE_TOKEN_EXPIRE_TIME, TimeUnit.SECONDS);              data.put("once_token", onceToken);       }       data.put("valid", valid);       return data;    } finally {       lock.unlock();    } }</code></pre> <ol> <li> <p>首先根据 uuid 查询 Redis 中存储的 LoginTicket 对象，然后检查二维码的状态是否为 "待扫描" 状态，如果是，那么将二维码的状态改为 "待确认" 状态。如果不是，那么该二维码已被扫描过，服务端提示用户 "二维码已失效"。我们规定，只允许第一个手机端能够扫描成功，加锁的目的是为了保证<code>查询 + 修改</code> 操作的原子性，避免两个手机端同时扫码，且同时检测到二维码的状态为 "待扫描"。</p> </li> <li> <p>上一步操作成功后，服务端将 LoginTicket 对象中的 userId 置为当前用户（扫码用户）的 userId，也就是将二维码与用户信息绑定在一起。由于<strong>扫码请求是由手机端发送的</strong>，因此该请求一定来自于一个有效的用户，我们在项目中配置一个拦截器（也可以是过滤器），当拦截到 "扫码" 请求后，根据请求中的 token（手机端发送请求时一定会携带 token）查询出用户信息，并将其存储到 ThreadLocal 容器（hostHolder）中，之后绑定信息时就可以从 ThreadLocal 容器将用户信息提取出来。注意，这里的 token 指的手机端 token，实际中应该还有设备信息，但为了简化操作，我们忽略掉设备信息。</p> </li> <li> <p>用户信息与二维码信息关联在一起后，服务端为手机端生成一个一次性 token，并存储到 Redis 服务器，其中 key 为一次性 token 的值，value 为 uuid。一次性 token 会返回给手机端，作为 "确认登录" 请求的凭证。</p> </li> </ol> <p>上述代码中，当二维码的状态被修改后，我们唤醒了在 condition 中阻塞的线程，这一步的目的是为了实现长轮询操作，下文中会介绍长轮询的设计思路。</p> <p><strong>5. 确认登录</strong></p> <p>手机端发送 "确认登录" 请求时，Query 参数中携带着 uuid，且 Header 中携带着一次性 token，服务端接收到请求后，首先验证一次性 token 的有效性，即检查一次性 token 对应的 uuid 与 Query 参数中的 uuid 是否相同，以确保扫码操作和确认操作来自于同一个手机端，该验证过程可在拦截器中配置。验证通过后，服务端调用 confirmLogin 方法，将二维码的状态置为 "已确认"：</p> <pre><code class="language-java">@RequestMapping(path = "/confirm", method = RequestMethod.POST) @ResponseBody public Response confirmLogin(@RequestParam String uuid) {    boolean logged = loginService.confirmLogin(uuid);    String msg = logged ? "登录成功!" : "二维码已失效!";    return Response.createResponse(msg, logged); }</code></pre> <p>confirmLogin 方法的主要逻辑如下：</p> <pre><code class="language-java">public boolean confirmLogin(String uuid) {    String ticketKey = CommonUtil.buildTicketKey(uuid);    LoginTicket loginTicket = (LoginTicket) cacheStore.get(ticketKey);    boolean logged = true;    Long expired = cacheStore.getExpireForSeconds(ticketKey);    if (loginTicket == null || expired == null || expired == 0) {       logged = false;    } else {       lock.lock();       try {             loginTicket.setStatus(QrCodeStatusEnum.CONFIRMED.getStatus());             Condition condition = CONDITION_CONTAINER.get(uuid);             if (condition != null) {                condition.signal();                CONDITION_CONTAINER.remove(uuid);             }             cacheStore.put(ticketKey, loginTicket, expired, TimeUnit.SECONDS);       } finally {             lock.unlock();       }    }    return logged; }</code></pre> <p>该方法会根据 uuid 查询二维码是否已经过期，如果未过期，那么就修改二维码的状态。</p> <p><strong>6. PC 端轮询</strong></p> <p>轮询操作指的是前端重复多次向后端发送相同的请求，以获知数据的变化。轮询分为长轮询和短轮询：</p> <ul> <li> <p>长轮询：服务端收到请求后，如果有数据，那么就立即返回，否则线程进入等待状态，直到有数据到达或超时，浏览器收到响应后立即重新发送相同的请求。</p> </li> <li> <p>短轮询：服务端收到请求后无论是否有数据都立即返回，浏览器收到响应后间隔一段时间后重新发送相同的请求。</p> </li> </ul> <p>由于长轮询相比短轮询能够得到实时的响应，且更加节约资源，因此项目中我们考虑使用 ReentrantLock 来实现长轮询。轮询的目的是为了查看二维码状态的变化：</p> <pre><code class="language-java">@RequestMapping(path = "/getQrCodeStatus", method = RequestMethod.GET) @ResponseBody public Response getQrCodeStatus(@RequestParam String uuid, @RequestParam int currentStatus) throws InterruptedException {    JSONObject data = loginService.getQrCodeStatus(uuid, currentStatus);    return Response.createResponse(null, data); }</code></pre> <p>getQrCodeStatus 方法的主要逻辑如下：</p> <pre><code class="language-java">public JSONObject getQrCodeStatus(String uuid, int currentStatus) throws InterruptedException {    lock.lock();    try {       JSONObject data = new JSONObject();       String ticketKey = CommonUtil.buildTicketKey(uuid);       LoginTicket loginTicket = (LoginTicket) cacheStore.get(ticketKey);        QrCodeStatusEnum statusEnum = loginTicket == null || QrCodeStatusEnum.parse(loginTicket.getStatus()) == QrCodeStatusEnum.INVALID ?                QrCodeStatusEnum.INVALID : QrCodeStatusEnum.parse(loginTicket.getStatus());        if (currentStatus == statusEnum.getStatus()) {             Condition condition = CONDITION_CONTAINER.get(uuid);             if (condition == null) {                condition = lock.newCondition();                CONDITION_CONTAINER.put(uuid, condition);             }             condition.await(LoginConstant.POLL_WAIT_TIME, TimeUnit.SECONDS);       }       // 用户扫码后向 PC 端返回头像信息       if (statusEnum == QrCodeStatusEnum.SCANNED) {             User user = userService.getCurrentUser(loginTicket.getUserId());             data.put("avatar", user.getAvatar());       }        // 用户确认后为 PC 端生成 access_token       if (statusEnum == QrCodeStatusEnum.CONFIRMED) {             String accessToken = CommonUtil.generateUUID();             cacheStore.put(CommonUtil.buildAccessTokenKey(accessToken), loginTicket.getUserId(), LoginConstant.ACCESS_TOKEN_EXPIRE_TIME, TimeUnit.SECONDS);             data.put("access_token", accessToken);       }        data.put("status", statusEnum.getStatus());       data.put("message", statusEnum.getMessage());       return data;    } finally {       lock.unlock();    } }</code></pre> <p>该方法接收两个参数，即 uuid 和 currentStatus，其中 uuid 用于查询二维码，currentStatus 用于确认二维码状态是否发生了变化，如果是，那么需要立即向 PC 端反馈。我们规定 PC 端在轮询时，请求的参数中需要携带二维码当前的状态。</p> <ol> <li> <p>首先根据 uuid 查询出二维码的最新状态，并比较其是否与 currentStatus 相同。如果相同，那么当前线程进入阻塞状态，直到被唤醒或者超时。</p> </li> <li> <p>如果二维码状态为 "待确认"，那么服务端向 PC 端返回扫码用户的头像信息（处于 "待确认" 状态时，二维码已与用户信息绑定在一起，因此可以查询出用户的头像）。</p> </li> <li> <p>如果二维码状态为 "已确认"，那么服务端为 PC 端生成一个 token，在之后的请求中，PC 端可通过该 token 表明自己的身份。</p> </li> </ol> <p>上述代码中的加锁操作是为了能够令当前处理请求的线程进入阻塞状态，当二维码的状态发生变化时，我们再将其唤醒，因此上文中的扫码操作和确认登录操作完成后，还会有一个唤醒线程的过程。</p> <p>实际上，加锁操作设计得不太合理，因为我们只设置了一把锁。因此对不同二维码的查询或修改操作都会抢占同一把锁。按理来说，不同二维码的操作之间应该是相互独立的，即使加锁，也应该是为每个二维码均配一把锁，但这样做代码会更加复杂，或许有其它更好的实现长轮询的方式？或者干脆直接短轮询。当然，也可以使用 WebSocket 实现长连接。</p> <p><strong>7. 拦截器配置</strong></p> <p>项目中配置了两个拦截器，一个用于确认用户的身份，即验证 token 是否有效：</p> <pre><code class="language-java">@Component public class LoginInterceptor implements HandlerInterceptor {      @Autowired     private HostHolder hostHolder;      @Autowired     private CacheStore cacheStore;      @Autowired     private UserService userService;      @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {          String accessToken = request.getHeader("access_token");         // access_token 存在         if (StringUtils.isNotEmpty(accessToken)) {             String userId = (String) cacheStore.get(CommonUtil.buildAccessTokenKey(accessToken));             User user = userService.getCurrentUser(userId);             hostHolder.setUser(user);         }         return true;     }      @Override     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {         hostHolder.clear();     } }</code></pre> <p>如果 token 有效，那么服务端根据 token 获取用户的信息，并将用户信息存储到 ThreadLocal 容器。手机端和 PC 端的请求都由该拦截器处理，如 PC 端的 "查询用户信息" 请求，手机端的 "扫码" 请求。由于我们忽略了手机端验证时所需要的的设备信息，因此 PC 端和手机端 token 可以使用同一套验证逻辑。</p> <p>另一个拦截器用于拦截 "确认登录" 请求，即验证一次性 token 是否有效：</p> <pre><code class="language-java">@Component public class ConfirmInterceptor implements HandlerInterceptor {      @Autowired     private CacheStore cacheStore;      @Override     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {          String onceToken = request.getHeader("once_token");         if (StringUtils.isEmpty(onceToken)) {             return false;         }         if (StringUtils.isNoneEmpty(onceToken)) {             String onceTokenKey = CommonUtil.buildOnceTokenKey(onceToken);             String uuidFromCache = (String) cacheStore.get(onceTokenKey);             String uuidFromRequest = request.getParameter("uuid");             if (!StringUtils.equals(uuidFromCache, uuidFromRequest)) {                 throw new RuntimeException("非法的一次性 token");             }             // 一次性 token 检查完成后将其删除             cacheStore.delete(onceTokenKey);         }         return true;     } }</code></pre> <p>该拦截器主要拦截 "确认登录" 请求，需要注意的是，一次性 token 验证通过后要立即将其删除。</p> <blockquote> <p>编码过程中，我们简化了许多操作，例如：1. 忽略掉了手机端的设备信息；2. 手机端确认登录后并没有直接为用户生成 PC 端 token，而是在轮询时生成。</p> </blockquote> <h2 id="效果演示">效果演示</h2> <p><strong>1. 工具准备</strong></p> <ul> <li> <p>浏览器：PC 端操作</p> </li> <li> <p>Postman：模仿手机端操作。</p> </li> </ul> <p><strong>2. 数据准备</strong></p> <p>由于我们没有实现真实的手机端扫码的功能，因此使用 Postman 模仿手机端向服务端发送请求。首先我们需要确保服务端存储着用户的信息，即在 Test 类中执行如下代码：</p> <pre><code class="language-java">@Test void insertUser() {    User user = new User();    user.setUserId("1");    user.setUserName("John同学");    user.setAvatar("/avatar.jpg");    cacheStore.put("user:1", user); }</code></pre> <p>手机端发送请求时需要携带手机端 token，这里我们为 useId 为 "1" 的用户生成一个 token（手机端 token）：</p> <pre><code class="language-java">@Test void loginByPhone() {    String accessToken = CommonUtil.generateUUID();    System.out.println(accessToken);    cacheStore.put(CommonUtil.buildAccessTokenKey(accessToken), "1"); }</code></pre> <p>手机端 token（accessToken）为 "aae466837d0246d486f644a3bcfaa9e1"（随机值），之后发送 "扫码" 请求时需要携带这个 token。</p> <p><strong>3. 扫码登录流程展示</strong></p> <p>启动项目，访问<code>localhost:8080/index</code>：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/cbee4e66c0558bff2eb70452724e2842.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>点击登录，并在开发者工具中找到二维码 id（uuid）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/474c7690b7cdde5dbbef33554185edbd.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>打开 Postman，发送<code>localhost:8080/login/scan</code> 请求，Query 参数中携带 uuid，Header 中携带手机端 token：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/419bef8f5ceebc1f592855630a11ac46.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>上述请求返回 "扫码成功" 的响应，同时还返回了一次性 token。此时 PC 端显示出扫码用户的头像：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ed299f7f17de2dbbf1e18e5a491e4cbd.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>在 Postman 中发送<code>localhost:8080/login/confirm</code> 请求，Query 参数中携带 uuid，Header 中携带一次性 token：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e5176f27114a9924ab5e3ad6add1e7a9.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p>"确认登录" 请求发送完成后，PC 端随即获取到 PC 端 token，并成功查询用户信息：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/ea11e40074afece1f1372fe2d254ef46.jpg" alt="Java 语言实现简易版扫码登录_在线工具"></p> <p><strong>结语</strong></p> <p>本文主要介绍了扫码登录的原理，并实现了一个简易版扫码登录的 Demo。关于原理部分的理解错误以及代码中的不足之处欢迎大家批评指正（⌒.－），源码见<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/JavaerJohn/loginByQrCode"  target="_blank" rel="nofollow">扫码登录</a>，如果觉得有收获的话给个 Star 吧~。</p> <blockquote> <p>好文推荐：<br /> [1].<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6940976355097985032#heading-1"  target="_blank" rel="nofollow">https://juejin.cn/post/6940976355097985032#heading-1</a><br /> [2].<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6844904111398191117?utm_source=gold_browser_extension"  target="_blank" rel="nofollow">https://juejin.cn/post/6844904111398191117?utm_source=gold_browser_extension</a></p> </blockquote> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-97943.htm">Tomcat 部署 Web项目以及更改项目名</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-90496.htm" title="MySQL分页查询">MySQL分页查询</a></li>
                        <li class="py-2"><a href="/news/article-89749.htm" title="Go语学习笔记 &#8211; gorm使用 &#8211; 表增删改查 | Web框架Gin（八）">Go语学习笔记 &#8211; gorm使用 &#8211; 表增删改查 | Web框架Gin（八）</a></li>
                        <li class="py-2"><a href="/news/article-88295.htm" title="ssm框架整合">ssm框架整合</a></li>
                        <li class="py-2"><a href="/news/article-97946.htm" title="Java 语言实现简易版扫码登录_在线工具">Java 语言实现简易版扫码登录_在线工具</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-5-free-node-subscribe.htm" title="「4月5日」最高速度19.7M/S，2025年HiddifyNext每天更新免费节点订阅链接">「4月5日」最高速度19.7M/S，2025年HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-81831.htm" title="springBoot中base64与文件的相互转换">springBoot中base64与文件的相互转换</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-12-hiddify-next-node-github.htm" title="「3月12日」最高速度21.7M/S，2025年HiddifyNext每天更新免费节点订阅链接">「3月12日」最高速度21.7M/S，2025年HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-79094.htm" title="动物疫苗的作用意义和价值是什么 动物疫苗的作用意义和价值是什么呢">动物疫苗的作用意义和价值是什么 动物疫苗的作用意义和价值是什么呢</a></li>
                        <li class="py-2"><a href="/news/article-85414.htm" title="国内十大宠物粮食品牌（国内十大宠物粮食品牌排名）">国内十大宠物粮食品牌（国内十大宠物粮食品牌排名）</a></li>
                        <li class="py-2"><a href="/news/article-69051.htm" title="导入导出接口写法">导入导出接口写法</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">51</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <div class="footer-bottom py-3 text-center">
        <div class="container-lg">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p class="m-0">
                HiddifyNextGithub免费节点官网 版权所有 Powered by WordPress
            </p>
        </div>
    </div>
    <script src="/assets/website/js/frontend/hiddifynextgithub/jquery-1.11.0.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.2/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/Swiper/10.3.1/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifynextgithub/plugins.js"></script>
    <script src="/assets/website/js/frontend/hiddifynextgithub/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>