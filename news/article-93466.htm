<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddifynextgithub.github.io/news/article-93466.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="format-detection" content="telephone=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>Redis+Caffeine两级缓存，让访问速度纵享丝滑</title>
        <meta name="description" content="在高性能的服务架构设计中，缓存是一个不可或缺的环节。在实际的项目中，我们通常会将一些热点数据存储到Redis或MemCache这类缓存中间件中，只有当缓存的访问没有命中时再查询数据库。在提升访问速度的" />
        <link rel="icon" href="/assets/website/img/hiddifynextgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="HiddifyNextGithub免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hiddifynextgithub.github.io/news/article-93466.htm" />
    <meta property="og:site_name" content="HiddifyNextGithub免费节点官网" />
    <meta property="og:title" content="Redis+Caffeine两级缓存，让访问速度纵享丝滑" />
    <meta property="og:image" content="https://hiddifynextgithub.github.io/uploads/20240808-2/f64ab05235c8fc37db7726cb7e724690.webp" />
        <meta property="og:release_date" content="2025-04-11T08:57:41" />
    <meta property="og:updated_time" content="2025-04-11T08:57:41" />
        <meta property="og:description" content="在高性能的服务架构设计中，缓存是一个不可或缺的环节。在实际的项目中，我们通常会将一些热点数据存储到Redis或MemCache这类缓存中间件中，只有当缓存的访问没有命中时再查询数据库。在提升访问速度的" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Redis+Caffeine两级缓存，让访问速度纵享丝滑">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">
    <link rel="dns-prefetch" href="https://fonts.gstatic.com">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/Swiper/10.3.1/swiper-bundle.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.2/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/hiddifynextgithub/vendor.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/hiddifynextgithub/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LL7EDWRR8Q"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-LL7EDWRR8Q');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
        <symbol xmlns="http://www.w3.org/2000/svg" id="navbar-icon" viewBox="0 0 16 16">
            <path d="M14 10.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 .5-.5zm0-3a.5.5 0 0 0-.5-.5h-7a.5.5 0 0 0 0 1h7a.5.5 0 0 0 .5-.5zm0-3a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0 0 1h11a.5.5 0 0 0 .5-.5z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="facebook" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22 12c0-5.52-4.48-10-10-10S2 6.48 2 12c0 4.84 3.44 8.87 8 9.8V15H8v-3h2V9.5C10 7.57 11.57 6 13.5 6H16v3h-2c-.55 0-1 .45-1 1v2h3v3h-3v6.95c5.05-.5 9-4.76 9-9.95z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="youtube" viewBox="0 0 32 32">
            <path fill="currentColor" d="M29.41 9.26a3.5 3.5 0 0 0-2.47-2.47C24.76 6.2 16 6.2 16 6.2s-8.76 0-10.94.59a3.5 3.5 0 0 0-2.47 2.47A36.13 36.13 0 0 0 2 16a36.13 36.13 0 0 0 .59 6.74a3.5 3.5 0 0 0 2.47 2.47c2.18.59 10.94.59 10.94.59s8.76 0 10.94-.59a3.5 3.5 0 0 0 2.47-2.47A36.13 36.13 0 0 0 30 16a36.13 36.13 0 0 0-.59-6.74ZM13.2 20.2v-8.4l7.27 4.2Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="instagram" viewBox="0 0 256 256">
            <path fill="currentColor" d="M128 80a48 48 0 1 0 48 48a48.05 48.05 0 0 0-48-48Zm0 80a32 32 0 1 1 32-32a32 32 0 0 1-32 32Zm48-136H80a56.06 56.06 0 0 0-56 56v96a56.06 56.06 0 0 0 56 56h96a56.06 56.06 0 0 0 56-56V80a56.06 56.06 0 0 0-56-56Zm40 152a40 40 0 0 1-40 40H80a40 40 0 0 1-40-40V80a40 40 0 0 1 40-40h96a40 40 0 0 1 40 40ZM192 76a12 12 0 1 1-12-12a12 12 0 0 1 12 12Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="twitter" viewBox="0 0 24 24">
            <path fill="currentColor" d="M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="linkedin" viewBox="0 0 512 512">
            <path fill="currentColor" d="M444.17 32H70.28C49.85 32 32 46.7 32 66.89v374.72C32 461.91 49.85 480 70.28 480h373.78c20.54 0 35.94-18.21 35.94-38.39V66.89C480.12 46.7 464.6 32 444.17 32Zm-273.3 373.43h-64.18V205.88h64.18ZM141 175.54h-.46c-20.54 0-33.84-15.29-33.84-34.43c0-19.49 13.65-34.42 34.65-34.42s33.85 14.82 34.31 34.42c-.01 19.14-13.31 34.43-34.66 34.43Zm264.43 229.89h-64.18V296.32c0-26.14-9.34-44-32.56-44c-17.74 0-28.24 12-32.91 23.69c-1.75 4.2-2.22 9.92-2.22 15.76v113.66h-64.18V205.88h64.18v27.77c9.34-13.3 23.93-32.44 57.88-32.44c42.13 0 74 27.77 74 87.64Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="arrow-down" viewBox="0 0 32 32">
            <path fill="currentColor" d="M24.59 16.59L17 24.17V4h-2v20.17l-7.59-7.58L6 18l10 10l10-10l-1.41-1.41z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="cart" viewBox="0 0 512 512">
            <path fill="currentColor" d="M160 96.039v32h304v63.345l-35.5 112.655H149.932L109.932 16H16v32h66.068l40 288.039h329.9L496 196.306V96.039H160zm16.984 272.305a64.073 64.073 0 0 0-64 64a64 64 0 0 0 128 0a64.072 64.072 0 0 0-64-64Zm0 96a32 32 0 1 1 32-32a32.038 32.038 0 0 1-32 32Zm224-96a64.073 64.073 0 0 0-64 64a64 64 0 0 0 128 0a64.072 64.072 0 0 0-64-64Zm0 96a32 32 0 1 1 32-32a32.038 32.038 0 0 1-32 32Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="balloon" viewBox="0 0 24 24">
            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-width="1.5">
                <path d="M8 16.607c1.15.86 2.518 1.38 4 1.393c4.142.034 7.594-3.92 7.56-8.196C19.527 5.53 16.142 2.034 12 2c-4.142-.034-7.473 3.404-7.44 7.68A8.88 8.88 0 0 0 5.244 13" />
                <path d="M15.5 9a3.035 3.035 0 0 0-3-3M12 20.35c.321 0 .482 0 .593-.022c.654-.128 1.051-.772.858-1.39c-.033-.105-.109-.242-.261-.515M12 20.35c-.321 0-.482 0-.593-.022c-.654-.128-1.051-.772-.858-1.39c.033-.105.109-.242.261-.515M12 20.35v2.15" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="bag-heart" viewBox="0 0 24 24">
            <g fill="none">
                <path fill="currentColor" d="m12 12.191l-.519.542a.75.75 0 0 0 1.038 0L12 12.191Zm-.957 3.675l-.444.604l.444-.604Zm1.914 0l-.444-.605l.444.605Zm-.957.462v.75v-.75Zm-.514-1.067c-.417-.307-.878-.69-1.227-1.093c-.368-.426-.509-.757-.509-.971h-1.5c0 .77.441 1.45.875 1.952c.453.525 1.014.984 1.474 1.321l.887-1.21ZM9.75 13.197c0-.576.263-.827.492-.907c.25-.088.714-.06 1.24.443l1.037-1.083c-.825-.79-1.861-1.096-2.773-.776c-.934.327-1.496 1.226-1.496 2.323h1.5Zm3.65 3.273c.46-.337 1.022-.796 1.475-1.32c.434-.502.875-1.183.875-1.953h-1.5c0 .214-.141.545-.51.971c-.348.403-.809.786-1.226 1.093l.887 1.21Zm2.35-3.273c0-1.097-.563-1.996-1.496-2.323c-.912-.32-1.948-.014-2.773.776l1.038 1.083c.525-.503.989-.531 1.24-.443c.228.08.491.33.491.907h1.5ZM10.6 16.47c.368.27.782.608 1.4.608v-1.5c-.024 0-.04 0-.094-.03a4 4 0 0 1-.42-.287l-.887 1.21Zm1.914-1.21a4 4 0 0 1-.42.289c-.054.029-.07.029-.094.029v1.5c.618 0 1.032-.337 1.4-.608l-.886-1.21Z" />
                <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="M9 6V5a3 3 0 1 1 6 0v1m5.224 6.526c-.586-3.121-.878-4.682-1.99-5.604C17.125 6 15.537 6 12.36 6h-.72c-3.176 0-4.764 0-5.875.922c-1.11.922-1.403 2.483-1.989 5.604c-.823 4.389-1.234 6.583-.034 8.029C4.942 22 7.174 22 11.639 22h.722c4.465 0 6.698 0 7.897-1.445c.696-.84.85-1.93.696-3.555" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="handiplast" viewBox="0 0 24 24">
            <g fill="none">
                <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="M13.5 7.642L9.071 3.213a4.142 4.142 0 0 0-5.858 5.858L14.93 20.787a4.142 4.142 0 0 0 5.858-5.858l-4.358-4.358" />
                <path stroke="currentColor" stroke-linecap="round" stroke-width="1.5" d="m12 17.858l-2.929 2.929A4.142 4.142 0 0 1 2.596 20m3.546-8l-2.929 2.929c-.322.322-.58.685-.774 1.071M12 6.142l2.929-2.929a4.142 4.142 0 1 1 5.858 5.858L17.857 12" />
                <path fill="currentColor" d="M15.841 12.871a.788.788 0 1 1-1.114 1.114a.788.788 0 0 1 1.114-1.114Zm-3.712-3.712a.787.787 0 1 0-1.114 1.114a.787.787 0 0 0 1.114-1.114Zm4.641 6.497a.787.787 0 1 1-1.114 1.114a.787.787 0 0 1 1.114-1.114ZM9.345 8.23A.788.788 0 1 0 8.23 9.346A.788.788 0 0 0 9.345 8.23Zm3.712 3.713a.787.787 0 1 1-1.113 1.114a.787.787 0 0 1 1.113-1.114Zm.928 2.785a.788.788 0 1 1-1.114 1.113a.788.788 0 0 1 1.114-1.113Zm-3.712-3.713a.787.787 0 1 0-1.114 1.114a.787.787 0 0 0 1.114-1.114Z" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="star-fill" viewBox="0 0 16 16">
            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="star-empty" viewBox="0 0 16 16">
            <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="play" viewBox="0 0 32 32">
            <path fill="currentColor" d="M7 28a1 1 0 0 1-1-1V5a1 1 0 0 1 1.482-.876l20 11a1 1 0 0 1 0 1.752l-20 11A1 1 0 0 1 7 28ZM8 6.69v18.62L24.925 16Z" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="call-chat" viewBox="0 0 24 24">
            <path fill="currentColor" fill-rule="evenodd" d="M17 2.75a4.25 4.25 0 0 0-3.807 6.142c.16.32.225.71.12 1.102l-.253.946l.946-.253a1.567 1.567 0 0 1 1.102.12A4.25 4.25 0 1 0 17 2.75ZM11.25 7a5.75 5.75 0 1 1 3.19 5.15a.126.126 0 0 0-.04-.013h-.007l-1.112.297a1.4 1.4 0 0 1-1.715-1.714l.298-1.113V9.6a.126.126 0 0 0-.014-.04a5.73 5.73 0 0 1-.6-2.56ZM3.718 4.092c1.226-1.29 3.254-1.049 4.268.385l1.26 1.783c.811 1.147.743 2.74-.225 3.76l-.245.257c0 .002 0 .004-.002.006c-.013.037-.045.152-.013.372c.067.456.418 1.381 1.846 2.884c1.432 1.508 2.3 1.864 2.703 1.929a.608.608 0 0 0 .294-.007l.408-.43c.874-.92 2.236-1.101 3.335-.469l1.91 1.1c1.633.94 2.013 3.239.708 4.613l-1.42 1.495c-.443.467-1.048.866-1.795.94c-1.824.18-6.049-.055-10.478-4.718c-4.134-4.352-4.919-8.137-5.018-9.986c-.049-.914.358-1.697.894-2.261l.544.516l-.544-.516l1.57-1.653Zm3.043 1.25c-.512-.724-1.433-.767-1.956-.217l-1.57 1.653c-.33.349-.505.748-.483 1.148c.08 1.51.731 4.952 4.607 9.033c4.064 4.279 7.809 4.4 9.244 4.258c.283-.028.575-.186.854-.48l1.42-1.495c.614-.645.453-1.808-.368-2.28l-1.91-1.1c-.513-.295-1.114-.204-1.499.202l-.455.48l-.544-.517c.543.517.543.517.542.518l-.001.002l-.003.003l-.007.006l-.014.014a1.003 1.003 0 0 1-.136.112c-.08.057-.186.12-.321.172c-.276.11-.64.168-1.091.095c-.878-.143-2.028-.773-3.55-2.377c-1.528-1.608-2.113-2.807-2.243-3.7c-.067-.454-.014-.817.084-1.092a1.592 1.592 0 0 1 .23-.427l.03-.037l.014-.015l.006-.006l.003-.003l.002-.002s.001-.001.545.515l-.544-.516l.287-.302c.445-.47.51-1.264.088-1.86L6.76 5.342Z" clip-rule="evenodd" />
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="mail" viewBox="0 0 21 21">
            <g fill="none" fill-rule="evenodd" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3.5 6.5v8a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2h-10a2 2 0 0 0-2 2z" />
                <path d="m5.5 7.5l5 3l5-3" />
            </g>
        </symbol>
        <symbol xmlns="http://www.w3.org/2000/svg" id="location" viewBox="0 0 24 24">
            <path fill="currentColor" fill-rule="evenodd" d="M5.25 7.7c0-3.598 3.059-6.45 6.75-6.45c3.608 0 6.612 2.725 6.745 6.208l.478.16c.463.153.87.289 1.191.439c.348.162.667.37.911.709c.244.338.341.707.385 1.088c.04.353.04.78.04 1.269v5.748c0 .61 0 1.13-.047 1.547c-.05.438-.161.87-.463 1.237a2.25 2.25 0 0 1-.62.525c-.412.237-.855.276-1.296.253c-.42-.022-.933-.107-1.534-.208l-.041-.007c-1.293-.215-1.814-.296-2.322-.254a4.3 4.3 0 0 0-.552.083c-.498.109-.976.342-2.159.933l-.122.061c-1.383.692-2.234 1.118-3.154 1.251c-.276.04-.555.06-.835.06c-.928-.002-1.825-.301-3.28-.786a73.75 73.75 0 0 1-.127-.043l-.384-.128l-.037-.012c-.463-.154-.87-.29-1.191-.44c-.348-.162-.667-.37-.911-.709c-.244-.338-.341-.707-.385-1.088c-.04-.353-.04-.78-.04-1.269v-5.02c0-.786 0-1.448.067-1.967c.07-.542.23-1.072.666-1.47a2.25 2.25 0 0 1 .42-.304c.517-.287 1.07-.27 1.605-.166c.11.021.223.047.342.078c-.066-.446-.1-.89-.1-1.328Zm.499 3.01a9.414 9.414 0 0 0-1.028-.288c-.395-.077-.525-.03-.586.004a.747.747 0 0 0-.14.101c-.053.048-.138.156-.19.556c-.053.41-.055.974-.055 1.825v4.93c0 .539.001.88.03 1.138c.028.238.072.327.112.381c.039.055.109.125.326.226c.236.11.56.219 1.07.39l.384.127c1.624.541 2.279.75 2.936.752c.207 0 .413-.015.617-.044c.65-.094 1.276-.397 2.82-1.17l.093-.046c1.06-.53 1.714-.857 2.417-1.01c.246-.054.496-.092.747-.113c.717-.06 1.432.06 2.593.253l.1.017c.655.109 1.083.18 1.407.196c.312.016.419-.025.471-.055a.749.749 0 0 0 .207-.175c.039-.047.097-.146.132-.456c.037-.323.038-.757.038-1.42v-5.667c0-.539-.001-.88-.03-1.138c-.028-.238-.072-.327-.112-.381c-.039-.055-.109-.125-.326-.226c-.236-.11-.56-.219-1.07-.39l-.06-.019a10.701 10.701 0 0 1-1.335 3.788c-.912 1.568-2.247 2.934-3.92 3.663a3.505 3.505 0 0 1-2.794 0c-1.673-.73-3.008-2.095-3.92-3.663a10.856 10.856 0 0 1-.934-2.087ZM12 2.75c-2.936 0-5.25 2.252-5.25 4.95c0 1.418.437 2.98 1.23 4.341c.791 1.362 1.908 2.47 3.223 3.044c.505.22 1.089.22 1.594 0c1.316-.574 2.432-1.682 3.224-3.044c.792-1.36 1.229-2.923 1.229-4.34c0-2.699-2.314-4.951-5.25-4.951Zm0 4a1.25 1.25 0 1 0 0 2.5a1.25 1.25 0 0 0 0-2.5ZM9.25 8a2.75 2.75 0 1 1 5.5 0a2.75 2.75 0 0 1-5.5 0Z" clip-rule="evenodd" />
        </symbol>
    </svg>
    <header id="header" class="site-header position-fixed z-2 w-100 border-bottom mb-5">
        <nav id="header-nav" class="navbar navbar-expand-lg py-3">
            <div class="container-lg">
                <a class="navbar-brand pb-4" href="/">
                                <span>Hiddify Next Github</span>
                                </a>
                <button class="navbar-toggler d-flex d-lg-none order-3 p-2 border-0 shadow-none bg-white" type="button" data-bs-toggle="offcanvas" data-bs-target="#bdNavbar" aria-controls="bdNavbar" aria-expanded="false" aria-label="Toggle navigation">
                    <svg class="navbar-icon" width="50" height="50">
                        <use xlink:href="#navbar-icon"></use>
                    </svg>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="bdNavbar" aria-labelledby="bdNavbarOffcanvasLabel">
                    <div class="offcanvas-header px-4 pb-0">
                        <button type="button" class="btn-close btn-close-black" data-bs-dismiss="offcanvas" aria-label="Close" data-bs-target="#bdNavbar"></button>
                    </div>
                    <div class="offcanvas-body">
                        <ul class="navbar-nav scrollspy-nav justify-content-end flex-grow-1 gap-lg-5 pe-3">
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link text-dark" href="/news/">新闻资讯</a>
                            </li>
                                                        
                            <span class="scrollspy-indicator"></span>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <section id="intro" class="scrollspy-section bg-light" style="background: url(/assets/website/img/hiddifynextgithub/bg-pattern.png) no-repeat;background-size: cover;">
        <div class="container-lg py-5">
            <div class="row justify-content-center py-5">
                <div class="col-lg-10 text-center">
                    <h1 class="display-2 fw-bold mt-5 pt-5">Redis+Caffeine两级缓存，让访问速度纵享丝滑</h1>
                    <nav class="breadcrumb justify-content-center">
                        <a class="breadcrumb-item" href="/">首页</a>
                        <a class="breadcrumb-item" href="/news/">新闻资讯</a>
                        <span class="breadcrumb-item active" aria-current="page">正文</span>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <section id="why" class="scrollspy-section py-5 my-5">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<blockquote> <p></p> </blockquote> <p>在高性能的服务架构设计中，缓存是一个不可或缺的环节。在实际的项目中，我们通常会将一些热点数据存储到<code>Redis</code>或<code>MemCache</code>这类缓存中间件中，只有当缓存的访问没有命中时再查询数据库。在提升访问速度的同时，也能降低数据库的压力。</p> <p>随着不断的发展，这一架构也产生了改进，在一些场景下可能单纯使用<code>Redis</code>类的远程缓存已经不够了，还需要进一步配合本地缓存使用，例如<code>Guava cache</code>或<code>Caffeine</code>，从而再次提升程序的响应速度与服务性能。于是，就产生了使用本地缓存作为一级缓存，再加上远程缓存作为二级缓存的<strong>两级缓存</strong>架构。</p> <p>在先不考虑并发等复杂问题的情况下，两级缓存的访问流程可以用下面这张图来表示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/599f867e2f50efd596f2f6ec584e6ca8.jpg" alt="Redis+Caffeine两级缓存，让访问速度纵享丝滑"></p> <h2 id="优点与问题">优点与问题</h2> <p>那么，使用两级缓存相比单纯使用远程缓存，具有什么优势呢？</p> <ul> <li>本地缓存基于本地环境的内存，访问速度非常快，对于一些变更频率低、实时性要求低的数据，可以放在本地缓存中，提升访问速度</li> <li>使用本地缓存能够减少和<code>Redis</code>类的远程缓存间的数据交互，减少网络I/O开销，降低这一过程中在网络通信上的耗时</li> </ul> <p>但是在设计中，还是要考虑一些问题的，例如数据一致性问题。首先，两级缓存与数据库的数据要保持一致，一旦数据发生了修改，在修改数据库的同时，本地缓存、远程缓存应该同步更新。</p> <p>另外，如果是分布式环境下，一级缓存之间也会存在一致性问题，当一个节点下的本地缓存修改后，需要通知其他节点也刷新本地缓存中的数据，否则会出现读取到过期数据的情况，这一问题可以通过类似于Redis中的发布/订阅功能解决。</p> <p>此外，缓存的过期时间、过期策略以及多线程访问的问题也都需要考虑进去，不过我们今天暂时先不考虑这些问题，先看一下如何简单高效的在代码中实现两级缓存的管理。</p> <h2 id="准备工作">准备工作</h2> <p>在简单梳理了一下要面对的问题后，下面开始两级缓存的代码实战，我们整合号称最强本地缓存的<code>Caffeine</code>作为一级缓存、性能之王的<code>Redis</code>作为二级缓存。首先建一个springboot项目，引入缓存要用到的相关的依赖：</p> <pre><code class="language-xml">&lt;dependency&gt;     &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;     &lt;artifactId&gt;caffeine&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;     &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;     &lt;version&gt;2.8.1&lt;/version&gt; &lt;/dependency&gt;</code></pre> <p>在<code>application.yml</code>中配置<code>Redis</code>的连接信息：</p> <pre><code class="language-yml">spring:   redis:     host: 127.0.0.1     port: 6379     database: 0     timeout: 10000ms     lettuce:       pool:         max-active: 8         max-wait: -1ms         max-idle: 8         min-idle: 0</code></pre> <p>在下面的例子中，我们将使用<code>RedisTemplate</code>来对<code>redis</code>进行读写操作，<code>RedisTemplate</code>使用前需要配置一下<code>ConnectionFactory</code>和序列化方式，这一过程比较简单就不贴出代码了，有需要本文全部示例代码的可以在<strong>文末获取</strong>。</p> <p>下面我们在单机环境下，将按照对业务侵入性的不同程度，分三个版本来实现两级缓存的使用。</p> <h2 id="v10版本">V1.0版本</h2> <p>我们可以通过手动操作<code>Caffeine</code>中的<code>Cache</code>对象来缓存数据，它是一个类似<code>Map</code>的数据结构，以<code>key</code>作为索引，<code>value</code>存储数据。在使用<code>Cache</code>前，需要先配置一下相关参数：</p> <pre><code class="language-java">@Configuration public class CaffeineConfig {     @Bean     public Cache&lt;String,Object&gt; caffeineCache(){         return Caffeine.newBuilder()                 .initialCapacity(128)//初始大小                 .maximumSize(1024)//最大数量                 .expireAfterWrite(60, TimeUnit.SECONDS)//过期时间                 .build();     } }</code></pre> <p>简单解释一下<code>Cache</code>相关的几个参数的意义：</p> <ul> <li><code>initialCapacity</code>：初始缓存空大小</li> <li><code>maximumSize</code>：缓存的最大数量，设置这个值可以避免出现内存溢出</li> <li><code>expireAfterWrite</code>：指定缓存的过期时间，是最后一次写操作后的一个时间，这里</li> </ul> <p>此外，缓存的过期策略也可以通过<code>expireAfterAccess</code>或<code>refreshAfterWrite</code>指定。</p> <p>在创建完成<code>Cache</code>后，我们就可以在业务代码中注入并使用它了。在没有使用任何缓存前，一个只有简单的<code>Service</code>层代码是下面这样的，只有crud操作：</p> <pre><code class="language-java">@Service @AllArgsConstructor public class OrderServiceImpl implements OrderService {     private final OrderMapper orderMapper;      @Override     public Order getOrderById(Long id) {		         Order order = orderMapper.selectOne(new LambdaQueryWrapper&lt;Order&gt;()               .eq(Order::getId, id));				         return order;     }          @Override     public void updateOrder(Order order) {               orderMapper.updateById(order);     }          @Override     public void deleteOrder(Long id) {         orderMapper.deleteById(id);     } }</code></pre> <p>接下来，对上面的<code>OrderService</code>进行改造，在执行正常业务外再加上操作两级缓存的代码，先看改造后的查询操作：</p> <pre><code class="language-java">public Order getOrderById(Long id) {     String key = CacheConstant.ORDER + id;     Order order = (Order) cache.get(key,             k -&gt; {                 //先查询 Redis                 Object obj = redisTemplate.opsForValue().get(k);                 if (Objects.nonNull(obj)) {                     log.info("get data from redis");                     return obj;                 }                  // Redis没有则查询 DB                 log.info("get data from database");                 Order myOrder = orderMapper.selectOne(new LambdaQueryWrapper&lt;Order&gt;()                         .eq(Order::getId, id));                 redisTemplate.opsForValue().set(k, myOrder, 120, TimeUnit.SECONDS);                 return myOrder;             });     return order; }</code></pre> <p>在<code>Cache</code>的<code>get</code>方法中，会先从缓存中进行查找，如果找到缓存的值那么直接返回。如果没有找到则执行后面的方法，并把结果加入到缓存中。</p> <p>因此上面的逻辑就是先查找<code>Caffeine</code>中的缓存，没有的话查找<code>Redis</code>，<code>Redis</code>再不命中则查询数据库，写入<code>Redis</code>缓存的操作需要手动写入，而<code>Caffeine</code>的写入由<code>get</code>方法自己完成。</p> <p>在上面的例子中，设置<code>Caffeine</code>的过期时间为60秒，而<code>Redis</code>的过期时间为120秒，下面进行测试，首先看第一次接口调用时，进行了数据库的查询：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/159183dd2153930f3b3c39e4bb7f622f.jpg" alt="Redis+Caffeine两级缓存，让访问速度纵享丝滑"></p> <p>而在之后60秒内访问接口时，都没有打印打任何sql或自定义的日志内容，说明接口没有查询<code>Redis</code>或数据库，直接从<code>Caffeine</code>中读取了缓存。</p> <p>等到距离第一次调用接口进行缓存的60秒后，再次调用接口：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f0b2fe337735345d13d477628a7149e2.jpg" alt="Redis+Caffeine两级缓存，让访问速度纵享丝滑"></p> <p>可以看到这时从<code>Redis</code>中读取了数据，因为这时<code>Caffeine</code>中的缓存已经过期了，但是<code>Redis</code>中的缓存没有过期仍然可用。</p> <p>下面再来看一下修改操作，代码在原先的基础上添加了手动修改<code>Redis</code>和<code>Caffeine</code>缓存的逻辑：</p> <pre><code class="language-java">public void updateOrder(Order order) {     log.info("update order data");     String key=CacheConstant.ORDER + order.getId();     orderMapper.updateById(order);     //修改 Redis     redisTemplate.opsForValue().set(key,order,120, TimeUnit.SECONDS);     // 修改本地缓存     cache.put(key,order); }</code></pre> <p>看一下下面图中接口的调用、以及缓存的刷新过程。可以看到在更新数据后，同步刷新了缓存中的内容，再之后的访问接口时不查询数据库，也可以拿到正确的结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c948c49b9c24b2affc195138811e8900.jpg" alt="Redis+Caffeine两级缓存，让访问速度纵享丝滑"></p> <p>最后再来看一下删除操作，在删除数据的同时，手动移除<code>Reids</code>和<code>Caffeine</code>中的缓存：</p> <pre><code class="language-java">public void deleteOrder(Long id) {     log.info("delete order");     orderMapper.deleteById(id);     String key= CacheConstant.ORDER + id;     redisTemplate.delete(key);     cache.invalidate(key); }</code></pre> <p>我们在删除某个缓存后，再次调用之前的查询接口时，又会出现重新查询数据库的情况：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/28d764088b45309ec3f031f8f82fcb15.jpg" alt="Redis+Caffeine两级缓存，让访问速度纵享丝滑"></p> <p>简单的演示到此为止，可以看到上面这种使用缓存的方式，虽然看起来没什么大问题，但是对代码的入侵性比较强。在业务处理的过程中要由我们频繁的操作两级缓存，会给开发人员带来很大负担。那么，有什么方法能够简化这一过程呢？我们看看下一个版本。</p> <h2 id="v20版本">V2.0版本</h2> <p>在<code>spring</code>项目中，提供了<code>CacheManager</code>接口和一些注解，允许让我们通过注解的方式来操作缓存。先来看一下常用几个注解说明：</p> <ul> <li><code>@Cacheable</code>：根据键从缓存中取值，如果缓存存在，那么获取缓存成功之后，直接返回这个缓存的结果。如果缓存不存在，那么执行方法，并将结果放入缓存中。</li> <li><code>@CachePut</code>：不管之前的键对应的缓存是否存在，都执行方法，并将结果强制放入缓存</li> <li><code>@CacheEvict</code>：执行完方法后，会移除掉缓存中的数据。</li> </ul> <p>如果要使用上面这几个注解管理缓存的话，我们就不需要配置V1版本中的那个类型为<code>Cache</code>的<code>Bean</code>了，而是需要配置<code>spring</code>中的<code>CacheManager</code>的相关参数，具体参数的配置和之前一样：</p> <pre><code class="language-java">@Configuration public class CacheManagerConfig {     @Bean     public CacheManager cacheManager(){         CaffeineCacheManager cacheManager=new CaffeineCacheManager();         cacheManager.setCaffeine(Caffeine.newBuilder()                 .initialCapacity(128)                 .maximumSize(1024)                 .expireAfterWrite(60, TimeUnit.SECONDS));         return cacheManager;     } }</code></pre> <p>然后在启动类上再添加上<code>@EnableCaching</code>注解，就可以在项目中基于注解来使用<code>Caffeine</code>的缓存支持了。下面，再次对<code>Service</code>层代码进行改造。</p> <p>首先，还是改造查询方法，在方法上添加<code>@Cacheable</code>注解：</p> <pre><code class="language-java">@Cacheable(value = "order",key = "#id") //@Cacheable(cacheNames = "order",key = "#p0") public Order getOrderById(Long id) {     String key= CacheConstant.ORDER + id;     //先查询 Redis     Object obj = redisTemplate.opsForValue().get(key);     if (Objects.nonNull(obj)){         log.info("get data from redis");         return (Order) obj;     }     // Redis没有则查询 DB     log.info("get data from database");     Order myOrder = orderMapper.selectOne(new LambdaQueryWrapper&lt;Order&gt;()             .eq(Order::getId, id));     redisTemplate.opsForValue().set(key,myOrder,120, TimeUnit.SECONDS);     return myOrder; }</code></pre> <p><code>@Cacheable</code>注解的属性多达9个，好在我们日常使用时只需要配置两个常用的就可以了。其中<code>value</code>和<code>cacheNames</code>互为别名关系，表示当前方法的结果会被缓存在哪个<code>Cache</code>上，应用中通过<code>cacheName</code>来对<code>Cache</code>进行隔离，每个<code>cacheName</code>对应一个<code>Cache</code>实现。<code>value</code>和<code>cacheNames</code>可以是一个数组，绑定多个<code>Cache</code>。</p> <p>而另一个重要属性<code>key</code>，用来指定缓存方法的返回结果时对应的<code>key</code>，这个属性支持使用<code>SpringEL</code>表达式。通常情况下，我们可以使用下面几种方式作为<code>key</code>：</p> <pre><code class="language-shell">#参数名 #参数对象.属性名 #p参数对应下标</code></pre> <p>在上面的代码中，我们看到添加了<code>@Cacheable</code>注解后，在代码中只需要保留原有的业务处理逻辑和操作<code>Redis</code>部分的代码即可，<code>Caffeine</code>部分的缓存就交给spring处理了。</p> <p>下面，我们再来改造一下更新方法，同样，使用<code>@CachePut</code>注解后移除掉手动更新<code>Cache</code>的操作：</p> <pre><code class="language-java">@CachePut(cacheNames = "order",key = "#order.id") public Order updateOrder(Order order) {     log.info("update order data");     orderMapper.updateById(order);     //修改 Redis     redisTemplate.opsForValue().set(CacheConstant.ORDER + order.getId(),             order, 120, TimeUnit.SECONDS);     return order; }</code></pre> <p>注意，这里和V1版本的代码有一点区别，在之前的更新操作方法中，是没有返回值的<code>void</code>类型，但是这里需要修改返回值的类型，否则会缓存一个空对象到缓存中对应的<code>key</code>上。当下次执行查询操作时，会直接返回空对象给调用方，而不会执行方法中查询数据库或<code>Redis</code>的操作。</p> <p>最后，删除方法的改造就很简单了，使用<code>@CacheEvict</code>注解，方法中只需要删除<code>Redis</code>中的缓存即可：</p> <pre><code class="language-java">@CacheEvict(cacheNames = "order",key = "#id") public void deleteOrder(Long id) {     log.info("delete order");     orderMapper.deleteById(id);     redisTemplate.delete(CacheConstant.ORDER + id); }</code></pre> <p>可以看到，借助<code>spring</code>中的<code>CacheManager</code>和<code>Cache</code>相关的注解，对V1版本的代码经过改进后，可以把全手动操作两级缓存的强入侵代码方式，改进为本地缓存交给<code>spring</code>管理，<code>Redis</code>缓存手动修改的半入侵方式。那么，还能进一步改造，使之成为对业务代码完全无入侵的方式吗？</p> <h2 id="v30版本">V3.0版本</h2> <p>模仿<code>spring</code>通过注解管理缓存的方式，我们也可以选择自定义注解，然后在切面中处理缓存，从而将对业务代码的入侵降到最低。</p> <p>首先定义一个注解，用于添加在需要操作缓存的方法上：</p> <pre><code class="language-java">@Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface DoubleCache {     String cacheName();     String key();	//支持springEl表达式     long l2TimeOut() default 120;     CacheType type() default CacheType.FULL; }</code></pre> <p>我们使用<code>cacheName + key</code>作为缓存的真正<code>key</code>（仅存在一个<code>Cache</code>中，不做<code>CacheName</code>隔离），<code>l2TimeOut</code>为可以设置的二级缓存<code>Redis</code>的过期时间，<code>type</code>是一个枚举类型的变量，表示操作缓存的类型，枚举类型定义如下：</p> <pre><code class="language-java">public enum CacheType {     FULL,   //存取     PUT,    //只存     DELETE  //删除 }</code></pre> <p>因为要使<code>key</code>支持<code>springEl</code>表达式，所以需要写一个方法，使用表达式解析器解析参数：</p> <pre><code class="language-java">public static String parse(String elString, TreeMap&lt;String,Object&gt; map){     elString=String.format("#{%s}",elString);     //创建表达式解析器     ExpressionParser parser = new SpelExpressionParser();     //通过evaluationContext.setVariable可以在上下文中设定变量。     EvaluationContext context = new StandardEvaluationContext();     map.entrySet().forEach(entry-&gt;         context.setVariable(entry.getKey(),entry.getValue())     );      //解析表达式     Expression expression = parser.parseExpression(elString, new TemplateParserContext());     //使用Expression.getValue()获取表达式的值，这里传入了Evaluation上下文     String value = expression.getValue(context, String.class);     return value; }</code></pre> <p>参数中的<code>elString</code>对应的就是注解中<code>key</code>的值，<code>map</code>是将原方法的参数封装后的结果。简单进行一下测试：</p> <pre><code class="language-java">public void test() {     String elString="#order.money";     String elString2="#user";     String elString3="#p0";         TreeMap&lt;String,Object&gt; map=new TreeMap&lt;&gt;();     Order order = new Order();     order.setId(111L);     order.setMoney(123D);     map.put("order",order);     map.put("user","Hydra");      String val = parse(elString, map);     String val2 = parse(elString2, map);     String val3 = parse(elString3, map);      System.out.println(val);     System.out.println(val2);     System.out.println(val3); }</code></pre> <p>执行结果如下，可以看到支持按照参数名称、参数对象的属性名称读取，但是不支持按照参数下标读取，暂时留个小坑以后再处理。</p> <pre><code class="language-properties">123.0 Hydra null</code></pre> <p>至于<code>Cache</code>相关参数的配置，我们沿用V1版本中的配置即可。准备工作做完了，下面我们定义切面，在切面中操作<code>Cache</code>来读写<code>Caffeine</code>的缓存，操作<code>RedisTemplate</code>读写<code>Redis</code>缓存。</p> <pre><code class="language-java">@Slf4j @Component @Aspect  @AllArgsConstructor public class CacheAspect {     private final Cache cache;     private final RedisTemplate redisTemplate;      @Pointcut("@annotation(com.cn.dc.annotation.DoubleCache)")     public void cacheAspect() {     }      @Around("cacheAspect()")     public Object doAround(ProceedingJoinPoint point) throws Throwable {         MethodSignature signature = (MethodSignature) point.getSignature();         Method method = signature.getMethod();          //拼接解析springEl表达式的map         String[] paramNames = signature.getParameterNames();         Object[] args = point.getArgs();         TreeMap&lt;String, Object&gt; treeMap = new TreeMap&lt;&gt;();         for (int i = 0; i &lt; paramNames.length; i++) {             treeMap.put(paramNames[i],args[i]);         }          DoubleCache annotation = method.getAnnotation(DoubleCache.class);         String elResult = ElParser.parse(annotation.key(), treeMap);         String realKey = annotation.cacheName() + CacheConstant.COLON + elResult;          //强制更新         if (annotation.type()== CacheType.PUT){             Object object = point.proceed();             redisTemplate.opsForValue().set(realKey, object,annotation.l2TimeOut(), TimeUnit.SECONDS);             cache.put(realKey, object);             return object;         }         //删除         else if (annotation.type()== CacheType.DELETE){             redisTemplate.delete(realKey);             cache.invalidate(realKey);             return point.proceed();         }          //读写，查询Caffeine         Object caffeineCache = cache.getIfPresent(realKey);         if (Objects.nonNull(caffeineCache)) {             log.info("get data from caffeine");             return caffeineCache;         }          //查询Redis         Object redisCache = redisTemplate.opsForValue().get(realKey);         if (Objects.nonNull(redisCache)) {             log.info("get data from redis");             cache.put(realKey, redisCache);             return redisCache;         }          log.info("get data from database");         Object object = point.proceed();         if (Objects.nonNull(object)){             //写入Redis             redisTemplate.opsForValue().set(realKey, object,annotation.l2TimeOut(), TimeUnit.SECONDS);             //写入Caffeine             cache.put(realKey, object);                 }         return object;     } }</code></pre> <p>切面中主要做了下面几件工作：</p> <ul> <li>通过方法的参数，解析注解中<code>key</code>的<code>springEl</code>表达式，组装真正缓存的<code>key</code></li> <li>根据操作缓存的类型，分别处理存取、只存、删除缓存操作</li> <li>删除和强制更新缓存的操作，都需要执行原方法，并进行相应的缓存删除或更新操作</li> <li>存取操作前，先检查缓存中是否有数据，如果有则直接返回，没有则执行原方法，并将结果存入缓存</li> </ul> <p>修改<code>Service</code>层代码，代码中只保留原有业务代码，再添加上我们自定义的注解就可以了：</p> <pre><code class="language-java">@DoubleCache(cacheName = "order", key = "#id",         type = CacheType.FULL) public Order getOrderById(Long id) {     Order myOrder = orderMapper.selectOne(new LambdaQueryWrapper&lt;Order&gt;()             .eq(Order::getId, id));     return myOrder; }  @DoubleCache(cacheName = "order",key = "#order.id",         type = CacheType.PUT) public Order updateOrder(Order order) {     orderMapper.updateById(order);     return order; }  @DoubleCache(cacheName = "order",key = "#id",         type = CacheType.DELETE) public void deleteOrder(Long id) {     orderMapper.deleteById(id); }</code></pre> <p>到这里，基于切面操作缓存的改造就完成了，<code>Service</code>的代码也瞬间清爽了很多，让我们可以继续专注于业务逻辑处理，而不用费心去操作两级缓存了。</p> <h2 id="总结">总结</h2> <p>本文按照对业务入侵的递减程度，依次介绍了三种管理两级缓存的方法。至于在项目中是否需要使用二级缓存，需要考虑自身业务情况，如果Redis这种远程缓存已经能够满足你的业务需求，那么就没有必要再使用本地缓存了。毕竟实际使用起来远没有那么简单，本文中只是介绍了最基础的使用，实际中的并发问题、事务的回滚问题都需要考虑，还需要思考什么数据适合放在一级缓存、什么数据适合放在二级缓存等等的其他问题。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-92718.htm">猫猫做驱虫多少钱（宠物猫做驱虫多少钱）</a></p>
                                        <p>下一个：<a href="/news/article-93467.htm">动物疫苗经销商邀请函怎么写（动物疫苗经销商邀请函怎么写范文）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-3-24-free-high-speed-nodes.htm" title="「3月24日」最高速度22M/S，2025年HiddifyNext每天更新免费节点订阅链接">「3月24日」最高速度22M/S，2025年HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-67767.htm" title="怀孕让猫抓破了没事吧（怀孕让猫抓破了一点点）">怀孕让猫抓破了没事吧（怀孕让猫抓破了一点点）</a></li>
                        <li class="py-2"><a href="/news/article-77732.htm" title="动物疫苗销售招聘2022（动物疫苗销售招聘2022最新信息）">动物疫苗销售招聘2022（动物疫苗销售招聘2022最新信息）</a></li>
                        <li class="py-2"><a href="/news/article-81193.htm" title="常州宠颐生美多格动物医院（常州宠物医院收费价目表）">常州宠颐生美多格动物医院（常州宠物医院收费价目表）</a></li>
                        <li class="py-2"><a href="/news/article-72998.htm" title="sql server排查死锁优化性能_MsSql_">sql server排查死锁优化性能_MsSql_</a></li>
                        <li class="py-2"><a href="/news/article-92006.htm" title="5千元小投资加盟店（5千元小投资加盟店福建）">5千元小投资加盟店（5千元小投资加盟店福建）</a></li>
                        <li class="py-2"><a href="/news/article-87558.htm" title="猫粮机器怎么做猫粮视频教程（猫粮制作机器设备）">猫粮机器怎么做猫粮视频教程（猫粮制作机器设备）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-6-free-subscribe-node.htm" title="「3月6日」最高速度21.3M/S，2025年HiddifyNext每天更新免费节点订阅链接">「3月6日」最高速度21.3M/S，2025年HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-31-node-share.htm" title="「3月31日」最高速度20M/S，2025年HiddifyNext每天更新免费节点订阅链接">「3月31日」最高速度20M/S，2025年HiddifyNext每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-93467.htm" title="动物疫苗经销商邀请函怎么写（动物疫苗经销商邀请函怎么写范文）">动物疫苗经销商邀请函怎么写（动物疫苗经销商邀请函怎么写范文）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <div class="footer-bottom py-3 text-center">
        <div class="container-lg">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p class="m-0">
                HiddifyNextGithub免费节点官网 版权所有 Powered by WordPress
            </p>
        </div>
    </div>
    <script src="/assets/website/js/frontend/hiddifynextgithub/jquery-1.11.0.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.3.2/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/Swiper/10.3.1/swiper-bundle.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifynextgithub/plugins.js"></script>
    <script src="/assets/website/js/frontend/hiddifynextgithub/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>